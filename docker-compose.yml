services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: tuneline-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: tuneline
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - tuneline-network

  # Backend API
  backend:
    build: ./backend
    container_name: tuneline-backend
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres/tuneline
      - LASTFM_API_KEY=${LASTFM_API_KEY}
      - LASTFM_API_SECRET=${LASTFM_API_SECRET}
      - SECRET_KEY=${SECRET_KEY:-supersecretkey}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - /app/__pycache__
    command: >
      sh -c "alembic upgrade head && 
             uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"
    networks:
      - tuneline-network

  # Frontend Application
  frontend:
    build: ./frontend
    container_name: tuneline-frontend
    depends_on:
      - backend
    ports:
      - "80:80"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=production
    networks:
      - tuneline-network

volumes:
  postgres_data:

networks:
  tuneline-network:
    driver: bridge
